#!/bin/sh

set -e
unset CDPATH
unset IFS

show_usage() {
cat <<USAGE
$($PHP_BIN $PHPUNIT_BIN --help)

PHP Environment:

  --phpenv <version>          Use local .phpenv version
  --phpenv-ci                 Local continuous integration emulation
USAGE
}

run_phpunit_with_phpenv_version() {
    php_bin="$1/bin/php"

    if test ! -f "$php_bin" || ! test -x "$php_bin"; then
        return
    fi

    "$php_bin" "$PHPUNIT_BIN" --colors --no-coverage "$2" && exit_status=0 || exit_status=1
    echo

    resolved_version="$(readlink -f "$php_bin")"
    if test "$php_bin" = "$resolved_version"; then
        version_info="${php_bin}"
    else
        version_info="${php_bin} -> ${resolved_version}"
    fi

    if test -n "$CI_VERSIONS_TESTED_INFO"; then
        CI_VERSIONS_TESTED_INFO="$CI_VERSIONS_TESTED_INFO\n"
    fi

    CI_VERSIONS_TESTED_INFO="${CI_VERSIONS_TESTED_INFO}${version_info}"
    CI_TEST_COUNT=$(($CI_TEST_COUNT + 1))

    if [ "$exit_status" = 1 ]; then
        CI_VERSIONS_FAILED="$CI_VERSIONS_FAILED\n${version_info}"
        CI_FAILURE_COUNT=$(($CI_FAILURE_COUNT + 1))
    fi
}

PHP_BIN="$(phpenv-getlocalversionbin || true)"
if test -n "$PHP_BIN"; then
    echo "Using $PHP_BIN"
else
    PHP_BIN=php
fi

if test -f ./vendor/bin/phpunit && test -x ./vendor/bin/phpunit; then
    PHPUNIT_BIN=vendor/bin/phpunit
elif test -f /usr/local/bin/phpunit && test -x /usr/local/bin/phpunit; then
    PHPUNIT_BIN=/usr/local/bin/phpunit
else
    echo >&2 "$(basename "$0"): phpunit not found"
    exit 1
fi

CI=

while test "$#" != 0; do
    case "$1" in
        --help|-h) show_usage; exit 0 ;;
        --phpenv)
            PHP_BIN="$HOME/.phpenv/versions/${2:?'version parameter is required'}/bin/php"
            shift
            if test ! -f "$PHP_BIN" || test ! -x "$PHP_BIN"; then
                echo >&2 "$(basename "$0"): phpenv version not found"
                exit 1
            fi
            ;;
        --phpenv-ci)
            CI=true
            ;;
        --) shift; break ;; # standard end of options list
        -*) break ;; # the remaining options are passed to phpunit executable
        *) break ;; # the remaining options are passed to phpunit executable
    esac
    shift
done

if test -n "$CI"; then

    CI_TEST_COUNT=0
    CI_FAILURE_COUNT=0
    CI_VERSIONS_TESTED_INFO=
    CI_VERSIONS_FAILED=

    PHPENV_VERSIONS=$(ls -1d ~/.phpenv/versions/* | sort -V)

    # Grep semver-like versions e.g. x.x.x and with trailing literal ".x"
    PHPENV_SEMVER_VERSIONS=$(echo "$PHPENV_VERSIONS" |\
        grep 'versions/[0-9]\.\(0\|[1-9][1-9]*\|x\)\(\.\(0\|x\|[1-9][1-9]*\)\)\?$' |\
        sort -V)

    # Grep only versions with trailing literal ".x". All of these versions are
    # used to run unit tests when the --phpenv option is selected.
    PHPENV_X_VERSIONS=$(echo "$PHPENV_SEMVER_VERSIONS" |\
        grep 'versions/[1-9]\.\(x\|\(0\|[0-9][1-9]*\.x\)\)$' |\
        sort -V)

    # @todo Add specific versions (if they exist) based on the versions specified in the project travis configurations.

    for version in $PHPENV_X_VERSIONS; do
        run_phpunit_with_phpenv_version "$version"
    done

    "$PHP_BIN" "$PHPUNIT_BIN" "$@"

    if test "$CI_FAILURE_COUNT" -gt 0; then
        echo
        echo "\033[37m\033[41mFAILURES!\033[0m"
        echo "\033[37m\033[41mVersions: $CI_TEST_COUNT, Failures: $CI_FAILURE_COUNT\033[0m"
        echo
        echo "$CI_VERSIONS_TESTED_INFO"
        echo
        echo "FAILED ($CI_FAILURE_COUNT):"
        echo "$CI_VERSIONS_FAILED"
        echo
    else
        echo
        echo "$(echo "$CI_VERSIONS_TESTED_INFO" | sed 's/^/\\033[30m\\033[42mOK\\033[0m /')"
        echo
        echo "\033[30m\033[42mOK ($CI_TEST_COUNT versions)\033[0m"
        echo
    fi
else
    "$PHP_BIN" "$PHPUNIT_BIN" --colors "$@"
fi
