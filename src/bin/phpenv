#!/bin/sh

set -e
unset CDPATH
unset IFS

show_usage() {
    cat <<EOT
Usage: $(basename "$0") [-h|--help] [--version] [-V]
    or $(basename "$0") <command> [<args>]

Commands:
  install <version>     Install a PHP version
  versions              List all available PHP versions
  reload                Reloads config overrides and ~/bin symlinks
EOT
}

list_available_versions() {
    if test -d "$PREFIX/versions"; then
        for version in "$PREFIX/versions/"*; do
            prefix="  "
            postfix=""

            if test -d "$version"; then
                name="${version##*/}"

                if test -L "$version"; then
                    resolved="$(readlink -nf "$version")"
                    postfix=" -> ${resolved##*/}"
                fi
            fi

            echo "${prefix}${name}${postfix}"
        done | sort -V
    fi
}

install_version() {
    version="$1"

    if test -z "$version"; then
        echo >&2 "$(basename "$0"): version is required"
        exit 1
    fi

    if test ! -d "$PREFIX/versions"; then
        mkdir -p "$PREFIX/versions"
    fi

    prefix="$PREFIX/versions/$(basename "$version")"

    if test -e "$prefix"; then
        echo >&2 "$(basename "$0"): version already exists"
        exit 1
    fi

    # TODO auto create/update symlinks for latest .x versions i.e. if 7.x
    # points to 7.0.5 and installing 7.0.6 and it is latest 7.x version then
    # point 7.x at 7.0.6.

    echo "install version: $version"
    echo "install prefix: $prefix"

    exec "$BUILD_BIN" --ini development "$version" "$prefix"
}

# Updates symbolic links for each php version in user bin directory. A symbolic
# link for each available version is created at ~/bin/php{version}.
update_symlinks() {
    echo "*** update symlinks"
    for version_path in ~/.phpenv/versions/[0-9]*; do
        if test ! -d "$version_path"; then
            continue
        fi

        version="$(basename "$version_path")"
        version_source="$version_path/bin/php"
        version_target="$HOME/bin/php$version"

        if test -e "$version_target"; then
            if test -h "$version_target"; then
                rm "$version_target"
            else
                echo >&2 "ERROR: expected a symbolic file: $version_target"
                continue
            fi
        fi

        ln -sv "$version_source" "$version_target"

    done
}

# Creates a symbolic link for lde configuration overrides for each available
# version. Note that this is a dependency on an internal lde toolset.
update_configs() {
    echo "*** update configs"
    for phpenv_version_etc_conf_d in ~/.phpenv/versions/*/etc/conf.d; do
        if test ! -d "$phpenv_version_etc_conf_d"; then
            echo >&2 "WARNING: $phpenv_version_etc_conf_d is not a valid directory"
            continue
        fi

        ln -vfs "$PROJECTS_PATH/lde/lde/etc/php/conf.d/90-lde.ini" "$phpenv_version_etc_conf_d/90-lde.ini"
    done
}

reload() {
    update_symlinks
    update_configs
}

readonly VERSION="0.5.0"
readonly PREFIX="$HOME/.phpenv"
readonly BUILD_BIN="$HOME/bin/php-build"

if test ! -f "$BUILD_BIN" || test ! -x "$BUILD_BIN"; then
    echo >&2 "$(basename "$0"): $(basename "$BUILD_BIN") not found"
    exit 1
fi

test "$#" = 0 && show_usage && exit 0

while test "$#" != 0; do
    case "$1" in
        -h|--help) show_usage; exit 0 ;;
        --version) echo "phpenv version $VERSION"; exit 0 ;;
        -V) echo "$VERSION"; exit 0 ;;
        install)
            shift
            if test "$1" = "--complete"; then
                exec "$BUILD_BIN" --definitions
            fi

            install_version "$@" || true
            reload
            exit 0
            ;;
        reload)
            reload
            exit 0
            ;;
        versions)
            list_available_versions
            exit 0
            ;;
        --) shift; break ;; # standard end of options list
        -*) echo >&2 "$(basename "$0"): unknown option '$1'"; exit 1 ;;
        *)  echo >&2 "$(basename "$0"): unknown argument '$1'"; exit 1 ;;
    esac
    shift
done
