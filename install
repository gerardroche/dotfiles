#!/bin/sh

set -e
unset CDPATH
unset IFS
readonly SOURCE="$(readlink -nf "$0")"
readonly SOURCE_PATH="$(dirname "$SOURCE")"

create_home_dir_symlink() {
    target="$1"
    target_basename="$(basename "$target")"

    if test "x$target_basename" = "x."; then
        return
    fi

    if test "x$target_basename" = "x.."; then
        return
    fi

    if test "x$HOME/$target_basename" = "x$SOURCE_PATH"; then
        echo >&2 "$0:create_home_dir_symlink() cannot link to self"
        exit 1
    fi

    from="./${target#$HOME/}"
    to="$HOME/$target_basename"

    if test -L "$to" -o ! -e "$to"; then
        ln -sfnv "$from" "$to"
    else
        echo >&2 "=> NOTICE Could not create home directory symlink."
        echo >&2 "          File already exists. Move the existing file and rerun the install script. \"$from\" -> \"$to\""
    fi
}

is_ubuntu_20_04() {
    test "x$(lsb_release -r | cut -f2)" = "x20.04"
}

cd "$SOURCE_PATH" && echo "Switched to '$PWD'"

SKIP_DEPS=
SKIP_SUBMODULES=
while test "$#" != 0; do
    case "$1" in
        --skip-dep*) SKIP_DEPS=true ;;
        --skip-sub*) SKIP_SUBMODULES=true ;;
        --) shift; break ;; # standard end of options list
        -*) echo >&2 "$0: unknown option '$1'"; exit 1 ;;
        *) echo >&2 "$0: unknown argument '$1'"; exit 1 ;;
    esac
    shift
done

if test -z "$SKIP_DEPS"; then
    echo "Install dependencies ..."

    sudo apt-get update

    command -v bsdtar >/dev/null 2>&1 || sudo apt-get install libarchive-tools
    command -v chromium-browser >/dev/null 2>&1 || sudo apt-get install chromium-browser
    command -v cmake  >/dev/null 2>&1 || sudo apt-get install cmake
    command -v ctags >/dev/null 2>&1 || sudo apt-get install exuberant-ctags
    command -v curl >/dev/null 2>&1 || sudo apt-get install curl
    command -v dconf-editor >/dev/null 2>&1 || sudo apt-get install dconf-editor
    command -v figlet >/dev/null 2>&1 || sudo apt-get install figlet
    command -v firefox >/dev/null 2>&1 || sudo apt-get install firefox firefox-locale-en
    command -v getfacl >/dev/null 2>&1 || sudo apt-get install acl
    command -v gimp >/dev/null 2>&1 || sudo apt-get install gimp
    command -v git >/dev/null 2>&1 || sudo apt-get install git
    command -v gitk >/dev/null 2>&1 || sudo apt-get install gitk
    command -v gnome-extensions  >/dev/null 2>&1 || sudo apt-get install gnome-extensions
    command -v htop >/dev/null 2>&1 || sudo apt-get install htop
    command -v jq >/dev/null 2>&1 || sudo apt-get install jq
    command -v kitty >/dev/null 2>&1 || sudo apt-get install kitty
    command -v lcov >/dev/null 2>&1 || sudo apt-get install lcov
    command -v multitail >/dev/null 2>&1 || sudo apt-get install multitail
    command -v netstat >/dev/null 2>&1 || sudo apt-get install net-tools
    command -v pip3 >/dev/null 2>&1 || sudo apt-get install python3-pip
    command -v rename >/dev/null 2>&1 || sudo apt-get install rename
    command -v sqlite3 >/dev/null 2>&1 || sudo apt-get install sqlite3
    command -v tmux >/dev/null 2>&1 || sudo apt-get install tmux
    command -v tree >/dev/null 2>&1 || sudo apt-get install tree
    command -v tuxguitar >/dev/null 2>&1 || sudo apt-get install tuxguitar tuxguitar-alsa tuxguitar-oss tuxguitar-jsa
    command -v unzip >/dev/null 2>&1 || sudo apt-get install unzip
    command -v wmctrl  >/dev/null 2>&1 || sudo apt-get install wmctrl
    command -v xclip >/dev/null 2>&1 || sudo apt-get install xclip
    command -v zstd >/dev/null 2>&1 || sudo apt-get install zstd

    dpkg -l | grep "ii  locales " >/dev/null 2>&1 || sudo apt-get install locales
    dpkg -l | grep git-extras >/dev/null 2>&1 || sudo apt-get install git-extras
    dpkg -l | grep ubuntu-restricted-extras >/dev/null 2>&1 || sudo apt-get install ubuntu-restricted-extras
    dpkg -l | grep vim.gtk >/dev/null 2>&1 || sudo apt-get install vim.gtk

    # Git single key behaviour (interactive.singlekey setting).
    # See https://superuser.com/a/817688/
    dpkg -l | grep libterm-readkey-perl >/dev/null 2>&1 || sudo apt-get install libterm-readkey-perl

    # Fonts.
    dpkg -l | grep fonts-inconsolata >/dev/null 2>&1 || sudo apt-get install fonts-inconsolata
    dpkg -l | grep ttf-anonymous-pro >/dev/null 2>&1 || sudo apt-get install ttf-anonymous-pro
    dpkg -l | grep ttf-mscorefonts-installer >/dev/null 2>&1 || sudo apt-get install ttf-mscorefonts-installer

    if is_ubuntu_20_04; then
        dpkg -l | grep ttf-ubuntu-font-family >/dev/null 2>&1 || sudo apt-get install ttf-ubuntu-font-family
    fi

    if is_ubuntu_20_04; then
        command -v flake8 >/dev/null 2>&1 || sudo apt-get install python-flake8
    fi

    python3 -m pip install --upgrade pip

    pip3 install --upgrade --user flake8
    pip3 install --upgrade --user flake8-docstrings
    pip3 install --upgrade --user pydocstyle
    pip3 install --upgrade --user mypy
    pip3 install --upgrade --user gcovr

    if is_ubuntu_20_04; then
        python3.8 -m pip install --upgrade --user flake8
        python3.8 -m pip install --upgrade --user flake8-docstrings
        python3.8 -m pip install --upgrade --user pydocstyle
        python3.8 -m pip install --upgrade --user mypy
        python3.8 -m pip install --upgrade --user gcovr
    fi
fi

if test -z "$SKIP_SUBMODULES"; then
    echo
    echo "Initialising submodules ..."
    git submodule init
    echo
    echo "Updating submodules ..."
    git submodule update
    echo
    echo "Pruning submodules ..."
    git submodule foreach 'git prune'
    echo
    echo "Update submodules ..."
    git submodule foreach 'git pull --ff-only'
fi

echo "Configure symlinks ..."

for file in "$SOURCE_PATH/src/".*; do
    create_home_dir_symlink "$file"
done

for file in "$SOURCE_PATH"/src/*; do
    create_home_dir_symlink "$file"
done

# .config/ symlinks
rm -rf ~/.config/kitty
ln -s $SOURCE_PATH/src/.config/kitty $HOME/.config/kitty

# git-open
ln -sfv ~/.dotfiles/vendor/paulirish/git-open/git-open ~/bin/git-open

# php-build
ln -sfv ~/.dotfiles/vendor/php-build/php-build/bin/php-build  ~/bin/php-build

# nvm
ln -sfnv ./.dotfiles/vendor/nvm-sh/nvm ~/.nvm

# nvim
if test ! -e ~/.config/nvim; then
    ln -sfv ~/.vim ~/.config/nvim
fi

# rbenv - quick hacky fixes
mkdir -pv ~/.rbenv/plugins
touch ~/.rbenv/plugins/ruby-build
rm ~/.rbenv/plugins/ruby-build
ln -sfv ~/.dotfiles/vendor/rbenv/ruby-build ~/.rbenv/plugins/ruby-build

if test -f ~/.dotfiles-private/install; then
    ~/.dotfiles-private/install
fi

echo "Configure Ubuntu (settings) ..."
"$SOURCE_PATH"/src/bin/setup-settings

echo "Configure Ubuntu (key bindings) ..."
"$SOURCE_PATH"/src/bin/setup-keybindings

echo "Force re-generation of font information cache files ..."
fc-cache -f

echo "Generate some locales ..."
locale-gen en_GB.UTF-8 en_US.UTF-8 en_IE.UTF-8

# Remove old unused files.
if test -f ~/.bowerrc; then
    rm -v ~/.bowerrc
fi

echo "Done"
